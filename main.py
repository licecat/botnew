# -*- coding: utf-8 -*-
import aiogram, re, traceback, random, json, datetime, aiohttp, aiofiles, flag
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from telethon import TelegramClient
from telethon.tl.functions.messages import GetHistoryRequest
from time import sleep
from datetime import datetime, timedelta
import random
from random import randint
from bs4 import BeautifulSoup
from multiprocessing import Process
import requests
from requests import get
import threading
import asyncio
import os
import string
from threading import Thread
import re
from contextlib import suppress
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)
import time
from aiogram.types import Message, InputFile
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
import io
from pyqiwip2p import QiwiP2P
from random import choice
from pycoingecko import CoinGeckoAPI
# Local imports
from configurator.config import *
from filters import IsPrivate
from keyboard import menu, admin
from data.csdb import *
from states.main_states import *

bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

profites = ['17000', '2000', '500', '900', '9000', '18000', '0', '100', '4000', '11000', '1000', '15000', '5100', '0', '16000', '12000', '13000', '19000', '50', '0', '20000', '3500', '6700']


prof = ['1700', '400', '15899', '4300', '5400', '1290', '17999', '50', '23000', '1000', '20000', '1300', '6100', '100']

error = ['‚ùå –°—Ç—Ä–µ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞, –º–∞–º–æ–Ω—Ç —Å–ª–∏–ª—Å—è', '‚ùå –ú–∞–º–æ–Ω—Ç –æ–∫–∞–∑–∞–ª—Å—è –≤–æ—Ä–∫–µ—Ä–æ–º –ø–æ 1.0', '‚ùå –ù–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –∫–∞—Ä—Ç–µ', '‚ùå 900', '‚ùå –§–∞–Ω—Ç–æ–º —É—Å–Ω—É–ª –∏ –ø—Ä–æ–µ–±–∞–ª —Ç–≤–æ–π –ª–æ–≥']


@dp.message_handler(IsPrivate(), commands=['start'])
async def start_command(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    a = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
    if user is None:
        await register_user(message.from_user.id, message.from_user.username)
    await message.answer(f"<b><i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à—É—é –∏–≥—Ä—É –≤ —Å–∫–∞–º —Å—Ñ–µ—Ä–µ.</i></b>\n<b><i>–°–∫–∞–º—å –º–∞–º–æ–Ω—Ç–æ–≤, –∑–∞–Ω–∏–º–∞–π –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏ –±—É–¥—å –ª—É—á—à–∏–º!</i></b>\n\n<b><i>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @liceyeah</i></b>", reply_markup = await menu.main_menus(message.from_user.id))

@dp.message_handler(commands=['admin'])
async def admin_command(message: types.Message):
	if message.from_user.id == 5374895788:
		await message.answer(f"<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>", reply_markup = await menu.admin_menu())



@dp.message_handler(lambda message: message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def process_callback_button1(message: types.Message):
    profile = await get_user(message.from_user.id)
    await message.answer(f"<b><i>üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–∫–∞–º–µ—Ä–∞ {message.from_user.mention} ({profile[2]}‚ö°Ô∏è)</i></b>\n\n<b><i>üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {profile[5]}</i></b>\n<b><i>üíµ C—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {profile[6]}</i></b>\n<b><i>üìä –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤: {profile[7]}</i></b>")

@dp.message_handler(lambda message: message.text == 'üîô –í –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def working_mess(message: types.Message):
	await message.answer(f"<b><i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à—É—é –∏–≥—Ä—É –≤ —Å–∫–∞–º —Å—Ñ–µ—Ä–µ.</i></b>\n<b><i>–°–∫–∞–º—å –º–∞–º–æ–Ω—Ç–æ–≤, –∑–∞–Ω–∏–º–∞–π –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –∏ –±—É–¥—å –ª—É—á—à–∏–º!</i></b>\n\n<b><i>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @liceyeah</i></b>", reply_markup = await menu.main_menus(message.from_user.id))

@dp.message_handler(lambda message: message.text == 'üíº –í–æ—Ä–∫')
async def working_mess(message: types.Message):
	profile = await get_user(message.from_user.id)
	if profile[3] == 1:
		await message.answer(f"<b><i>–í—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º –º–∞–º–æ–Ω—Ç–æ–º</i></b>")
	else:
		await add_cooldown_check(message.from_user.id)
		energy = profile[2]
		oll_profit = profile[7]
		if profile[2] == 0:
			await message.answer(f"<b><i>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –µ–Ω–µ—Ä–≥–∏–∏</i></b>")
			await dell_cooldown_check(message.from_user.id)
		else:	
			balanses = profile[5]
			messageFirst = await message.answer(f"<b><i>‚è≥ –ò—â—É –º–∞–º–æ–Ω—Ç–∞</i></b>")
			await asyncio.sleep(2)
			m = await messageFirst.edit_text(text='<b><i>‚è≥ –ò—â—É –º–∞–º–æ–Ω—Ç–∞.</i></b>')
			await asyncio.sleep(2)
			s = await m.edit_text(text='<b><i>‚è≥ –ò—â—É –º–∞–º–æ–Ω—Ç–∞...</i></b>')
			await asyncio.sleep(2)
			k = await s.edit_text(text='<b><i>‚è≥ –ö–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.</i></b>')
			await asyncio.sleep(2)
			a = await k.edit_text(text='<b><i>‚è≥ –ö–∏–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É..</i></b>')
			await asyncio.sleep(2)
			z = await a.edit_text(text='<b><i>‚è≥ –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</i></b>')
			await asyncio.sleep(2)
			x = await z.edit_text(text='<b><i>‚è≥ –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç..</i></b>')
			await asyncio.sleep(2)
			r = await x.edit_text(text='<b><i>‚è≥ –ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...</i></b>')
			await asyncio.sleep(2)
			proff = int(random.choice(profites))
			if proff == 0:
				await update_energy(energy, message.from_user.id)
				err = random.choice(error)
				profiles = await get_user(message.from_user.id)
				await s.edit_text(text=f'<b><i>{err}</i></b>\n\n<b><i>–û—Å—Ç–∞–ª–æ—Å—å  {profiles[2]}‚ö°Ô∏è (–µ–¥. —ç–Ω–µ—Ä–≥–∏–∏)</i></b>')
				await dell_cooldown_check(message.from_user.id)
			else:
				await update_energy(energy, message.from_user.id)
				summa = int(proff)
				balanse = int(balanses) + int(summa)
				balanse = str(balanse)
				await add_balanse(balanse, message.from_user.id)
				await add_oll_balanse(balanse, message.from_user.id)
				profiles = await get_user(message.from_user.id)
				await s.edit_text(text=f'<b><i>ü§ë –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!</i></b>\n<b><i>üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {proff}</i></b>\n<b><i>–¢–≤–æ—è –¥–æ–ª—è - {proff} (100%)</i></b>\n\n<b><i>–û—Å—Ç–∞–ª–æ—Å—å  {profiles[2]}‚ö°Ô∏è (–µ–¥. —ç–Ω–µ—Ä–≥–∏–∏)</i></b>')
				await dell_cooldown_check(message.from_user.id)
				await update_profits(oll_profit, message.from_user.id)

@dp.callback_query_handler(lambda c: c.data == 'buy_energy1')
async def callback_func(callback_query: types.CallbackQuery):
	profile = await get_user(callback_query.from_user.id)
	if profile[2] == 10 or profile[2] > 10:
		await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –¢–≤–æ—è –µ–Ω–µ—Ä–≥–∏—è –∏ —Ç–∞–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ {profile[2]}‚ö°Ô∏è', show_alert=True)
	else:
		if profile[5] < 5000:
			await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –±–∞–ª–∞–Ω—Å - {profile[5]}‚ÇΩ', show_alert=True)
		else:			
			profile = await get_user(callback_query.from_user.id)
			stoimost = 5000
			energybuy = 1
			balanses = profile[5]
			energy = profile[2]
			balanse = int(balanses)
			await buy_energ(balanse, stoimost, energy, energybuy, callback_query.from_user.id)
			profiles = await get_user(callback_query.from_user.id)
			await bot.answer_callback_query(callback_query.id, text=f'–û—Ç–ª–∏—á–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫, –µ–Ω–µ—Ä–≥–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {profiles[2]}‚ö°Ô∏è\n\n–î–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å - {profiles[5]}‚ÇΩ', show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'buy_energy2')
async def callback_func(callback_query: types.CallbackQuery):
	profile = await get_user(callback_query.from_user.id)
	if profile[2] > 8:
		await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –¢–≤–æ—è –µ–Ω–µ—Ä–≥–∏—è –∏ —Ç–∞–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ {profile[2]}‚ö°Ô∏è', show_alert=True)
	else:
		if profile[5] < 10000:
			await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –±–∞–ª–∞–Ω—Å - {profile[5]}‚ÇΩ', show_alert=True)
		else:
			profile = await get_user(callback_query.from_user.id)
			stoimost = 10000
			energybuy = 2
			balanses = profile[5]
			energy = profile[2]
			balanse = int(balanses)
			await buy_energ(balanse, stoimost, energy, energybuy, callback_query.from_user.id)
			profiles = await get_user(callback_query.from_user.id)
			await bot.answer_callback_query(callback_query.id, text=f'–û—Ç–ª–∏—á–Ω—ã–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫, –µ–Ω–µ—Ä–≥–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {profiles[2]}‚ö°Ô∏è\n\n–î–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å - {profiles[5]}‚ÇΩ', show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'buy_energy3')
async def callback_func(callback_query: types.CallbackQuery):
	profile = await get_user(callback_query.from_user.id)
	if profile[2] > 5:
		await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –¢–≤–æ—è –µ–Ω–µ—Ä–≥–∏—è –∏ —Ç–∞–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ {profile[2]}‚ö°Ô∏è', show_alert=True)
	else:
		if profile[5] < 25000:
			await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –±–∞–ª–∞–Ω—Å - {profile[5]}‚ÇΩ', show_alert=True)
		else:
			profile = await get_user(callback_query.from_user.id)
			stoimost = 25000
			energybuy = 5
			balanses = profile[5]
			energy = profile[2]
			balanse = int(balanses)
			await buy_energ(balanse, stoimost, energy, energybuy, callback_query.from_user.id)
			profiles = await get_user(callback_query.from_user.id)
			await bot.answer_callback_query(callback_query.id, text=f'–í–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞–ª,, –µ–Ω–µ—Ä–≥–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {profiles[2]}‚ö°Ô∏è\n\n–î–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å - {profiles[5]}‚ÇΩ', show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'buy_energy4')
async def callback_func(callback_query: types.CallbackQuery):
	profile = await get_user(callback_query.from_user.id)
	if profile[2] > 1:
		await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –¢–≤–æ—è –µ–Ω–µ—Ä–≥–∏—è –∏ —Ç–∞–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ {profile[2]}‚ö°Ô∏è', show_alert=True)
	else:
		if profile[5] < 50000:
			await bot.answer_callback_query(callback_query.id, text=f'‚ùóÔ∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, –±–∞–ª–∞–Ω—Å - {profile[5]}‚ÇΩ', show_alert=True)
		else:
			profile = await get_user(callback_query.from_user.id)
			stoimost = 50000
			energybuy = 10
			balanses = profile[5]
			energy = profile[2]
			balanse = int(balanses)
			await buy_energ(balanse, stoimost, energy, energybuy, callback_query.from_user.id)
			profiles = await get_user(callback_query.from_user.id)
			await bot.answer_callback_query(callback_query.id, text=f'–í–∫—É—Å–Ω–æ –ø–æ–∫—É—à–∞–ª, –µ–Ω–µ—Ä–≥–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {profiles[2]}‚ö°Ô∏è\n\n–î–µ–Ω–µ–≥ –æ—Å—Ç–∞–ª–æ—Å—å - {profiles[5]}‚ÇΩ', show_alert=True)


@dp.message_handler(lambda message: message.text == 'üõí –ú–∞–≥–∞–∑–∏–Ω')
async def working_mess(message: types.Message):
	await message.answer(f"<b><i>üõí –° –ø–æ–º–æ—â—å—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —Ç—ã c–º–æ–∂–µ—à—å –¥–æ–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ—Ñ–∏—Ç–æ–≤</i></b>", reply_markup = await menu.store())

@dp.message_handler(lambda message: message.text == 'üîã –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ 0.25–ª')
async def working_mess(message: types.Message):
	await message.answer(f"<b><i>üîã –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ 0.25–ª</i></b>\n\n<b><i>–¶–µ–Ω–∞: 5000‚ÇΩ</i></b>\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –¥–∞–µ—Ç 1‚ö°Ô∏è</i></b>", reply_markup = await menu.buy_energy())

@dp.message_handler(lambda message: message.text == 'üîã –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ 0.5–ª')
async def working_mess(message: types.Message):
	await message.answer(f"<b><i>üîã –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ 0.5–ª</i></b>\n\n<b><i>–¶–µ–Ω–∞: 10000‚ÇΩ</i></b>\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞—Ä—è–∂–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –¥–∞–µ—Ç 2‚ö°Ô∏è</i></b>", reply_markup = await menu.buy_energy2())

@dp.message_handler(lambda message: message.text == 'üçï –ü–∏—Ü—Ü–∞ 25—Å–º')
async def working_mess(message: types.Message):
	await message.answer(f"<b><i>üçï –ü–∏—Ü—Ü–∞ 25—Å–º</i></b>\n\n<b><i>–¶–µ–Ω–∞: 25000‚ÇΩ</i></b>\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–ª—ã –∏ –¥–∞–µ—Ç 5‚ö°Ô∏è</i></b>", reply_markup = await menu.buy_energy3())

@dp.message_handler(lambda message: message.text == 'üçï –ü–∏—Ü—Ü–∞ 50—Å–º')
async def working_mess(message: types.Message):
	await message.answer(f"<b><i>üçï –ü–∏—Ü—Ü–∞ 50—Å–º</i></b>\n\n<b><i>–¶–µ–Ω–∞: 50000‚ÇΩ</i></b>\n<b><i>–û–ø–∏—Å–∞–Ω–∏–µ: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏–ª—ã –∏ –¥–∞–µ—Ç 10‚ö°Ô∏è</i></b>", reply_markup = await menu.buy_energy4())


@dp.message_handler(commands=['scm'])
async def echo_message(message: types.Message):
	proff = random.choice(prof)
	await bot.send_message(message.from_user.id, f'<b><i>ü§ë –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!</i></b>\n<b><i>üí∞ –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - {proff}</i></b>\n<b><i>–¢–≤–æ—è –¥–æ–ª—è - {proff} (100%)</i></b>')










# ADMN

@dp.callback_query_handler(text="stats", state="*")
async def bot_info(call: CallbackQuery, state: FSMContext):
    await state.finish()
    users = await get_all_users()
    await bot.send_message(call.message.chat.id, f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>")

@dp.callback_query_handler(lambda c: c.data == "mass_send", state="*")
async def mass_send(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.answer_callback_query(callback_query.id)
    await SendText.text.set()
    await callback_query.message.edit_text(text="<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>")


@dp.message_handler(IsPrivate(), state=SendText.text)
async def accept_text(message: types.Message, state: FSMContext):
    users = await get_all_users()
    count = 0
    count_no = 0
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
            count += 1
        except:
            count_no += 1
    await message.answer(f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.\n–î–æ—à–ª–æ:</b> <code>{count}</code>\n<b>–ù–µ –ø–æ–ª—É—á–∏–ª–∏:</b> <code>{count_no}</code>")
    await state.finish()







async def on_startup(dp):
    await create_tables()



if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)